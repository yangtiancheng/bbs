<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个玩Odoo的小伙</title>
  
  <subtitle>总结一尺，成长一寸</subtitle>
  <link href="/bbs.github.io/atom.xml" rel="self"/>
  
  <link href="https://yangtiancheng.github.io/"/>
  <updated>2019-06-19T04:31:15.453Z</updated>
  <id>https://yangtiancheng.github.io/</id>
  
  <author>
    <name>杨天成</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://yangtiancheng.github.io/rewrite-action/"/>
    <id>https://yangtiancheng.github.io/rewrite-action/</id>
    <published>2019-06-19T04:31:15.453Z</published>
    <updated>2019-06-19T04:31:15.453Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: 重写源码action<br>date: 2019-06-19 11:07:11<br>tags: Odoo,XML</p><h2 id="categories-Odoo-XML"><a href="#categories-Odoo-XML" class="headerlink" title="categories: Odoo,XML"></a>categories: Odoo,XML</h2><h1 id="重写源码action或者更新record数据柄属性"><a href="#重写源码action或者更新record数据柄属性" class="headerlink" title="重写源码action或者更新record数据柄属性"></a>重写源码action或者更新record数据柄属性</h1><h2 id="场景简述"><a href="#场景简述" class="headerlink" title="场景简述"></a>场景简述</h2><p>也许一个源码的菜单，限制了展示的值范围为id &gt; 100的数据 domain = [(‘id’,’&gt;’,100)]<br>在我们自己的个性化代码中，可能需要将显示范围改成 id &gt; 200。</p><h2 id="操作及理念"><a href="#操作及理念" class="headerlink" title="操作及理念"></a>操作及理念</h2><ol><li>Odoo通过XML产生的数据，不仅仅会创建对应的模型记录数据，同时会将数据集绑定创建一条ir.model.data的数据。</li><li>我们只需要在自己的个性化模块中重写对应的action修改domain属性即可，但是由于所处模块(module)的不同，我们重写的action必须指定要覆盖的模块。</li><li>所以在外部ID-extend_id前面加上module的前缀，即module.action_extend_id格式即可。</li></ol><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询当前action与data的关键参数</span><br><span class="line">select imd.id,imd.module 所处模块,iaw.id 动作ID, iaw.domain 动作域</span><br><span class="line">from ir_model_data imd,ir_act_window iaw</span><br><span class="line">where imd.res_id = iaw.id</span><br><span class="line">and imd.name = &apos;rounding_list_action&apos;;</span><br></pre></td></tr></table></figure><p><img src="/bbs.github.io/rewrite-action/action01.jpg" alt="你想输入的替代文字"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 所处模块(module)为源码account 原始action--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"rounding_list_action"</span> <span class="attr">model</span>=<span class="string">"ir.actions.act_window"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>Cash Roundings<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"res_model"</span>&gt;</span>account.cash.rounding<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_type"</span>&gt;</span>form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_mode"</span>&gt;</span>tree,form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"domain"</span>&gt;</span>[('id','&gt;',100)]<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"help"</span> <span class="attr">type</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"o_view_nocontent_smiling_face"</span>&gt;</span>Create the first cash rounding<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--所处模块(module)为个性化my_module --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">record</span> <span class="attr">id</span>=<span class="string">"account.rounding_list_action"</span> <span class="attr">model</span>=<span class="string">"ir.actions.act_window"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>Cash Roundings<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"res_model"</span>&gt;</span>account.cash.rounding<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_type"</span>&gt;</span>form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_mode"</span>&gt;</span>tree,form<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"domain"</span>&gt;</span>[('id','&gt;',200)]<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"help"</span> <span class="attr">type</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"o_view_nocontent_smiling_face"</span>&gt;</span>Create the first cash rounding<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: 重写源码action&lt;br&gt;date: 2019-06-19 11:07:11&lt;br&gt;tags: Odoo,XML&lt;/p&gt;
&lt;h2 id=&quot;categories-Odoo-XML&quot;&gt;&lt;a href=&quot;#categories-Odoo-XML&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>django新手入门01 - Model</title>
    <link href="https://yangtiancheng.github.io/django%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A801/"/>
    <id>https://yangtiancheng.github.io/django新手入门01/</id>
    <published>2019-06-12T10:32:58.000Z</published>
    <updated>2019-06-12T07:37:43.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Queries「查询」"><a href="#Queries「查询」" class="headerlink" title="Queries「查询」"></a>Queries「查询」</h1><h2 id="Create-objects-「创建新对象」"><a href="#Create-objects-「创建新对象」" class="headerlink" title="Create objects 「创建新对象」"></a>Create objects 「创建新对象」</h2><p>使用model实例类 通过**kwargs赋值创建实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> Blog</span><br><span class="line">b = Blog(name=<span class="string">'Beatles Blog'</span>, tagline=<span class="string">'All the latest Beatles news.'</span>)</span><br><span class="line">b.save()</span><br></pre></td></tr></table></figure><h2 id="Saving-changes-to-objects-which-already-in-DB-Normal-UPDATE"><a href="#Saving-changes-to-objects-which-already-in-DB-Normal-UPDATE" class="headerlink" title="Saving changes to objects which already in DB(Normal UPDATE)"></a>Saving changes to objects which already in DB(Normal UPDATE)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b.name = <span class="string">'XXX'</span></span><br><span class="line">b.save()</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Saving-ForeignKey-and-M2m-Fields-Special-Fields-UPDATE"><a href="#Saving-ForeignKey-and-M2m-Fields-Special-Fields-UPDATE" class="headerlink" title="Saving ForeignKey and M2m Fields(Special Fields UPDATE)"></a>Saving ForeignKey and M2m Fields(Special Fields UPDATE)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># FK</span></span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> Blog, Entry</span><br><span class="line">entry = Entry.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">cheese_blog = Blog.objects.get(name=<span class="string">"Cheddar Talk"</span>)</span><br><span class="line">entry.blog = cheese_blog</span><br><span class="line">entry.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># M2m <span class="doctag">TODO:</span>Use add()</span></span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> Author</span><br><span class="line">joe = Author.objects.create(name=<span class="string">"Joe"</span>)</span><br><span class="line">entry.authors.add(joe)</span><br><span class="line"></span><br><span class="line"><span class="comment"># M2m Multi add()</span></span><br><span class="line">john = Author.objects.create(name=<span class="string">"John"</span>)</span><br><span class="line">paul = Author.objects.create(name=<span class="string">"Paul"</span>)</span><br><span class="line">george = Author.objects.create(name=<span class="string">"George"</span>)</span><br><span class="line">ringo = Author.objects.create(name=<span class="string">"Ringo"</span>)</span><br><span class="line">entry.authors.add(john, paul, george, ringo)</span><br></pre></td></tr></table></figure><ul><li>Notice: M2m中add的objects如果类型错误，Django将会报错。</li></ul><h2 id="Search-objects"><a href="#Search-objects" class="headerlink" title="Search objects"></a>Search objects</h2><ol><li>class_name.objects 中 objects就是当前类的Manager，切记实例无法使用objects.</li><li>QuerySet是Select，而filters是Where。</li><li>Class.objects.all() 查找当前表的所有记录。</li><li>filter(**kwargs) 筛选 Entry.objects.filter(pub_date__year=2006) 等价 Entry.objects.all().filter(pub_date__year=2006)</li><li>exclude(**kwargs) 排除 Entry.objects.exclude(pub_date__year=2006) 等价 Entry.objects.all().exclude(pub_date__year=2006)</li><li>4和5可以连在一起用 Entry.objects.filter(pub_date__year=2006).exclude(pub_date__year=2007)</li><li>4和5尽量分开处理，用变量存储。</li><li>定义filter和exclude的时候，代码并不会执行，除非调用当前筛选逻辑 比如print(X)</li></ol><h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">one_entry = Entry.objects.get(pk=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol><li>get()有且必须只能找到1条记录。</li><li>get()的用法和filter()相同，不同的是如果get()获取不到对象，则会返回 DoesNotExist 异常。</li><li>如果获取到多个记录，则会返回 MultipleObjectsReturned 异常。</li></ol><ul><li>除过all、get、filter、exclude 更多请查阅<a href="https://docs.djangoproject.com/en/2.2/ref/models/querysets/#queryset-api" target="_blank" rel="noopener">QuerySet API</a></li></ul><h2 id="Limit-QuerySets"><a href="#Limit-QuerySets" class="headerlink" title="Limit QuerySets"></a>Limit QuerySets</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.all()[Offset:Limit:Step]</span><br><span class="line">Entry.objects.all()[:<span class="number">5</span>]</span><br><span class="line">Entry.objects.all()[:<span class="number">5</span>:<span class="number">10</span>]</span><br><span class="line">Entry.objects.all()[:<span class="number">10</span>:<span class="number">2</span>] <span class="comment"># - 使用step会重新从数据库执行查询 其他只是querysets切片成new querysets.</span></span><br></pre></td></tr></table></figure><h2 id="Field-Lookups"><a href="#Field-Lookups" class="headerlink" title="Field Lookups"></a>Field Lookups</h2><ol><li>field__exact=1 等价SQL-WHERE: field=1</li><li>field__iexact=1 不区分大小写</li><li>field__contains=’Lennon’ 等价SQL-WHERE:SELECT … WHERE headline LIKE ‘%Lennon%’;</li><li>field__icontains=’Lennon’ 不区分大小写</li><li><p>startswith\endswith\istartswith\iendswith等.</p><pre><code>更多参阅[链接](https://docs.djangoproject.com/en/2.2/ref/models/querysets/#field-lookups)</code></pre></li><li>支持跨越关系（外键表）指定 Blog.objects.filter(entry__headline__contains=’Lennon’) 支持反向搜索(小写class名称)</li></ol><p>CURRENT ENDSWITH : Spanning multi-valued relationships¶<a href="https://docs.djangoproject.com/en/2.2/topics/db/queries/" target="_blank" rel="noopener">链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Queries「查询」&quot;&gt;&lt;a href=&quot;#Queries「查询」&quot; class=&quot;headerlink&quot; title=&quot;Queries「查询」&quot;&gt;&lt;/a&gt;Queries「查询」&lt;/h1&gt;&lt;h2 id=&quot;Create-objects-「创建新对象」&quot;&gt;&lt;a href=&quot;#Create-objects-「创建新对象」&quot; class=&quot;headerlink&quot; title=&quot;Create objects 「创建新对象」&quot;&gt;&lt;/a&gt;Create objects 「创建新对象」&lt;/h2&gt;&lt;p&gt;使用model实例类 通过**kwargs赋值创建实例&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; blog.models &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = Blog(name=&lt;span class=&quot;string&quot;&gt;&#39;Beatles Blog&#39;&lt;/span&gt;, tagline=&lt;span class=&quot;string&quot;&gt;&#39;All the latest Beatles news.&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b.save()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Saving-changes-to-objects-which-already-in-DB-Normal-UPDATE&quot;&gt;&lt;a href=&quot;#Saving-changes-to-objects-which-already-in-DB-Normal-UPDATE&quot; class=&quot;headerlink&quot; title=&quot;Saving changes to objects which already in DB(Normal UPDATE)&quot;&gt;&lt;/a&gt;Saving changes to objects which already in DB(Normal UPDATE)&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;b.name = &lt;span class=&quot;string&quot;&gt;&#39;XXX&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b.save()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Django" scheme="https://yangtiancheng.github.io/categories/Django/"/>
    
    
      <category term="Django" scheme="https://yangtiancheng.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>gevent+prefork</title>
    <link href="https://yangtiancheng.github.io/gevent-prefork/"/>
    <id>https://yangtiancheng.github.io/gevent-prefork/</id>
    <published>2019-05-19T12:04:58.000Z</published>
    <updated>2019-06-19T04:14:43.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="os"><a href="#os" class="headerlink" title="os"></a>os</h2><h3 id="os-fork"><a href="#os-fork" class="headerlink" title="os.fork()"></a>os.fork()</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;os&quot;&gt;&lt;a href=&quot;#os&quot; class=&quot;headerlink&quot; title=&quot;os&quot;&gt;&lt;/a&gt;os&lt;/h2&gt;&lt;h3 id=&quot;os-fork&quot;&gt;&lt;a href=&quot;#os-fork&quot; class=&quot;headerlink&quot; title=&quot;os.fork()&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基础字段用法提示</title>
    <link href="https://yangtiancheng.github.io/%E5%9F%BA%E7%A1%80%E5%AD%97%E6%AE%B5%E7%94%A8%E6%B3%95%E6%8F%90%E7%A4%BA/"/>
    <id>https://yangtiancheng.github.io/基础字段用法提示/</id>
    <published>2019-05-13T18:46:05.000Z</published>
    <updated>2019-05-13T10:49:16.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字段default-function"><a href="#字段default-function" class="headerlink" title="字段default=function"></a>字段default=function</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@api.model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_company</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> self.env.user.company_id.id</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="comment"># 公司</span></span><br><span class="line">company_id = fields.Many2one(comodel_name=<span class="string">'res.company'</span>, string=<span class="string">'Company'</span>, help=<span class="string">"Company"</span>, index=<span class="literal">True</span>,</span><br><span class="line">                             default=_get_company)</span><br></pre></td></tr></table></figure><p>注意_get_company的方法一般用api.model装饰器修饰，default的属性接收值是对应数据的ID，不是对象，切记!!!</p><h1 id="字段domain前后用法"><a href="#字段domain前后用法" class="headerlink" title="字段domain前后用法"></a>字段domain前后用法</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字段default-function&quot;&gt;&lt;a href=&quot;#字段default-function&quot; class=&quot;headerlink&quot; title=&quot;字段default=function&quot;&gt;&lt;/a&gt;字段default=function&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/categories/Odoo/"/>
    
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/tags/Odoo/"/>
    
  </entry>
  
  <entry>
    <title>动态显示Selection的选项域</title>
    <link href="https://yangtiancheng.github.io/%E5%8A%A8%E6%80%81%E6%98%BE%E7%A4%BASelection%E7%9A%84%E9%80%89%E9%A1%B9%E5%9F%9F/"/>
    <id>https://yangtiancheng.github.io/动态显示Selection的选项域/</id>
    <published>2019-04-29T14:07:16.000Z</published>
    <updated>2019-04-29T06:15:51.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>一个模型，两个form视图，对应的selection字段值域不同</p><h1 id="直接代码上代码"><a href="#直接代码上代码" class="headerlink" title="直接代码上代码"></a>直接代码上代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">odoo.define(<span class="string">'select_hide.hide_selection_units'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> registry = <span class="built_in">require</span>(<span class="string">'web.field_registry'</span>);</span><br><span class="line">    <span class="keyword">var</span> relational_fields = <span class="built_in">require</span>(<span class="string">'web.relational_fields'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> FieldSelection = relational_fields.FieldSelection;</span><br><span class="line">    <span class="keyword">var</span> rpc = <span class="built_in">require</span>(<span class="string">'web.rpc'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> select_hide_by_condition = FieldSelection.extend(&#123;</span><br><span class="line">        _renderEdit: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            self = <span class="keyword">this</span>;</span><br><span class="line">            <span class="comment">// model function_model function_name field_name</span></span><br><span class="line">            <span class="keyword">var</span> function_name = self.attrs.function;</span><br><span class="line">            <span class="keyword">var</span> value = <span class="keyword">this</span>.value;</span><br><span class="line">            <span class="keyword">if</span> (self.$el[<span class="number">0</span>].options.length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.field.type === <span class="string">'selection'</span>) &#123;</span><br><span class="line">                    rpc.query(&#123;</span><br><span class="line">                        <span class="string">"model"</span>: <span class="keyword">this</span>.model,</span><br><span class="line">                        <span class="string">"method"</span>: function_name,</span><br><span class="line">                        <span class="string">"args"</span>: [&#123;<span class="string">'args'</span>: <span class="keyword">this</span>.recordData&#125;],</span><br><span class="line">                    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (!!result) &#123;</span><br><span class="line">                            self.$el.empty();</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">                                self.$el.append($(<span class="string">'&lt;option/&gt;'</span>, &#123;</span><br><span class="line">                                    value: <span class="built_in">JSON</span>.stringify(result[i][<span class="number">0</span>]),</span><br><span class="line">                                    text: result[i][<span class="number">1</span>]</span><br><span class="line">                                &#125;));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.field.selection.length; i++) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.$el.append($(<span class="string">'&lt;option/&gt;'</span>, &#123;</span><br><span class="line">                            value: <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.field.selection[i][<span class="number">0</span>]),</span><br><span class="line">                            text: <span class="keyword">this</span>.field.selection[i][<span class="number">1</span>]</span><br><span class="line">                        &#125;));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.field.type === <span class="string">'many2one'</span> &amp;&amp; value) &#123;</span><br><span class="line">                value = value.data.id;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    registry</span><br><span class="line">        .add(<span class="string">'select_hide_by_condition'</span>, select_hide_by_condition);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"source_type"</span> <span class="attr">widget</span>=<span class="string">"select_hide_by_condition"</span> <span class="attr">function</span>=<span class="string">"select_hide_by_condition"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@api.model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_hide_by_condition</span><span class="params">(self, datas)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    来源类型 选择框数据限制</span></span><br><span class="line"><span class="string">    :param datas: 当前数据行的所有字段信息</span></span><br><span class="line"><span class="string">    :return: 新的选择框值域</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> datas[<span class="string">'args'</span>][<span class="string">'XXX'</span>]:</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            (<span class="string">'table_item'</span>, _(<span class="string">'Table Item'</span>)),</span><br><span class="line">            (<span class="string">'code'</span>, _(<span class="string">'Code'</span>)),</span><br><span class="line">            (<span class="string">'mapping_table'</span>, _(<span class="string">'Mapping Table'</span>)),</span><br><span class="line">        ]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            (<span class="string">''</span>, <span class="string">''</span>),</span><br><span class="line">            (<span class="string">'table_item'</span>, _(<span class="string">'Table Item'</span>)),</span><br><span class="line">            (<span class="string">'code'</span>, _(<span class="string">'Code'</span>)),</span><br><span class="line">            (<span class="string">'mapping_table'</span>, _(<span class="string">'Mapping Table'</span>)),</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p><img src="/Users/tc/code/Githubs/bbs/source/images/selection_hide_001.png" alt="无限制"><br><img src="/Users/tc/code/Githubs/bbs/source/images/selection_hide_002.png" alt="有限制"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;一个模型，两个form视图，对应的selection字段值域不同&lt;/p&gt;
&lt;h1 id=&quot;直接代码上代码&quot;&gt;&lt;a href=&quot;#直接代码上代
      
    
    </summary>
    
      <category term="Odoo,JS,Selection" scheme="https://yangtiancheng.github.io/categories/Odoo-JS-Selection/"/>
    
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/tags/Odoo/"/>
    
  </entry>
  
  <entry>
    <title>res.users</title>
    <link href="https://yangtiancheng.github.io/res-users/"/>
    <id>https://yangtiancheng.github.io/res-users/</id>
    <published>2019-04-19T10:32:20.000Z</published>
    <updated>2019-04-19T02:35:49.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="function-has-group"><a href="#function-has-group" class="headerlink" title="function has_group"></a>function has_group</h1><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>group_ext_id - 组 外部ID</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;function-has-group&quot;&gt;&lt;a href=&quot;#function-has-group&quot; class=&quot;headerlink&quot; title=&quot;function has_group&quot;&gt;&lt;/a&gt;function has_group&lt;/h1&gt;&lt;h2 id=&quot;参
      
    
    </summary>
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/categories/Odoo/"/>
    
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/tags/Odoo/"/>
    
  </entry>
  
  <entry>
    <title>model文件</title>
    <link href="https://yangtiancheng.github.io/model%E6%96%87%E4%BB%B6/"/>
    <id>https://yangtiancheng.github.io/model文件/</id>
    <published>2019-04-19T09:26:46.000Z</published>
    <updated>2019-04-20T11:27:31.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="function-read"><a href="#function-read" class="headerlink" title="function read"></a>function read</h1><h2 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h2><p>fields - 记录返回字段列表<br>load - 暂时不知</p><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>Read方法其实就是读指定self中字段的数据记录，通常在python代码里用browse方法代替<br>可能会出现异常: 给定的记录当前用户没有可读的权限</p><ol><li>首先检查用户对模型的访问权限 check_access_rights</li><li>检查用户对字段模型的访问权限 check_field_access_rights</li></ol><hr><h1 id="function-check-access-rights"><a href="#function-check-access-rights" class="headerlink" title="function check_access_rights"></a>function check_access_rights</h1><h2 id="参数：-1"><a href="#参数：-1" class="headerlink" title="参数："></a>参数：</h2><p>operation - 操作方式 read\write\create\unlink<br>raise_exception - 异常是否抛出 默认t</p><h2 id="简介：-1"><a href="#简介：-1" class="headerlink" title="简介："></a>简介：</h2><p>查询当前用户对于当前模型是否有相关的权限</p><hr><h1 id="function-check-field-access-rights"><a href="#function-check-field-access-rights" class="headerlink" title="function check_field_access_rights"></a>function check_field_access_rights</h1><h2 id="参数：-2"><a href="#参数：-2" class="headerlink" title="参数："></a>参数：</h2><p>operation - 操作方式 read\write\create\unlink<br>fields - 检查的字段</p><h2 id="简介：-2"><a href="#简介：-2" class="headerlink" title="简介："></a>简介：</h2><p>检查当前用户对给定的字段是否有访问权限，如果没有抛出例外，否则将会返回字段列表</p><ol><li>超级管理员直接返回随影的字段</li><li>普通人员 对于没提供fields参数字段时，查询当前记录的所有字段_fields,并验证每一个字段是否有效(valid)</li><li>将提供的字段分为 存储、继承、计算 三种类型，切记fields中不能出现不属于当前模型的字段名</li><li>对于存储和继承的字段，通过数据库查找 _read_from_database</li></ol><h2 id="内部方法："><a href="#内部方法：" class="headerlink" title="内部方法："></a>内部方法：</h2><h3 id="function-valid"><a href="#function-valid" class="headerlink" title="function valid"></a>function valid</h3><h4 id="参数：-3"><a href="#参数：-3" class="headerlink" title="参数："></a>参数：</h4><p>fname - 字段名称</p><h4 id="简介：-3"><a href="#简介：-3" class="headerlink" title="简介："></a>简介：</h4><p>通过字段是否有组权限，如果有，检查用户有没有这些组权限 user_has_groups。</p><hr><h1 id="function-user-has-groups"><a href="#function-user-has-groups" class="headerlink" title="function user_has_groups"></a>function user_has_groups</h1><h2 id="参数：-4"><a href="#参数：-4" class="headerlink" title="参数："></a>参数：</h2><p>groups - (str)完整的组外部数据记录，通过逗号分隔 例如：base.group_user,base.group_system,每一个组前面可选加感叹号’!’，<br>例如：!base.group_user,!base.group_system</p><p>返回 - 如果当前用户是给定组(非!前缀)的成员，并且不是任何组给定前缀组(!前缀)的成员，返回t<br>简单理解就是：给了组，用户是非!前缀组的成员，并且不是任何!前缀组的成员。</p><h2 id="简介：-4"><a href="#简介：-4" class="headerlink" title="简介："></a>简介：</h2><p>如果用户是“groups”中至少一个组的成员，并且“groups”不是中以“!”开头的任何组的成员，则返回true！<br>通常用于解析视图和模型定义中的“groups”属性。</p><ol><li>首先将groups根据逗号分开，对每一个组外部ID去除空格、换行符。</li><li>将提供的groups分成!前缀组集合not_has_groups(添加时去掉前缀!)，和没有!前缀的组集合has_groups。</li><li>检查not_has_groups中的每一个组<br>3.1 如果是’base.group_no_one’组，检查用户是否在’base.group_no_one’组中，环境栈中是否是debug模式，满足上述条件，返回 False ，因为是not_has_groups<br>3.2 如果是其他组，检查用户是否在当前组内，如果在，返回 False</li><li>上面条件都ok的情况下，检查has_groups中的每一个组<br>4.1 如果是’base.group_no_one’组，检查用户是否在’base.group_no_one’组中，环境栈中是否是debug模式，满足上述条件，返回 True ，因为是has_groups<br>4.2 如果是其他组，检查用户是否在当前组内，如果在，返回 True </li><li>如果没有提供groups参数值，返回 True</li></ol><h1 id="function-read-from-database"><a href="#function-read-from-database" class="headerlink" title="function _read_from_database"></a>function _read_from_database</h1><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>field_names - 存储字段名称列表<br>inherited_field_names - 继承字段名称列表</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>查询self对应的数据库字段，将结果存储在缓存中、如果有错误也存在缓存中</p><p>如果self没有记录就跳出，</p><h1 id="function-where-calc"><a href="#function-where-calc" class="headerlink" title="function _where_calc"></a>function _where_calc</h1><h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><p>domain - 域<br>active_test - 是否用active字段筛选 默认t<br>返回 - Query查询对象</p><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>如果模型有active字段，参数active_test控制是否添加domain -&gt; (‘active’, ‘=’, 1)</p><h1 id="class-expression"><a href="#class-expression" class="headerlink" title="class expression"></a>class expression</h1><h2 id="function-init"><a href="#function-init" class="headerlink" title="function init"></a>function <strong>init</strong></h2><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><p>domain - 域列表<br>model - 模型记录</p><p>### </p><hr><h1 id="function-sudo"><a href="#function-sudo" class="headerlink" title="function sudo"></a>function sudo</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;function-read&quot;&gt;&lt;a href=&quot;#function-read&quot; class=&quot;headerlink&quot; title=&quot;function read&quot;&gt;&lt;/a&gt;function read&lt;/h1&gt;&lt;h2 id=&quot;参数：&quot;&gt;&lt;a href=&quot;#参数：&quot; c
      
    
    </summary>
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/categories/Odoo/"/>
    
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/tags/Odoo/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的Many2many</title>
    <link href="https://yangtiancheng.github.io/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Many2many/"/>
    <id>https://yangtiancheng.github.io/你不知道的Many2many/</id>
    <published>2019-04-17T19:03:18.000Z</published>
    <updated>2019-04-17T11:13:16.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你关联我，我关联你，我们同用一个relation"><a href="#你关联我，我关联你，我们同用一个relation" class="headerlink" title="你关联我，我关联你，我们同用一个relation"></a>你关联我，我关联你，我们同用一个relation</h1><h2 id="1-举个🌰"><a href="#1-举个🌰" class="headerlink" title="1. 举个🌰"></a>1. 举个🌰</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_name = <span class="string">"res.groups"</span></span><br><span class="line">users = fields.Many2many(<span class="string">'res.users'</span>, <span class="string">'res_groups_users_rel'</span>, <span class="string">'gid'</span>, <span class="string">'uid'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_name = <span class="string">"res.users"</span></span><br><span class="line">groups_id = fields.Many2many(<span class="string">'res.groups'</span>, <span class="string">'res_groups_users_rel'</span>, <span class="string">'uid'</span>, <span class="string">'gid'</span>)</span><br></pre></td></tr></table></figure><h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h2><p>从上面的例子可以看出，两个字段使用了同一个relation(res_groups_users_rel),之前说好的relation唯一 不能和任何表名重复吗?<br></p><p>对，这也没问题。其实m2m本来就是两张表数据存在的一种互相多关联关系，你关联我，我关联你，只要我们对应的数据位置保持一致就行。数据保持一致，就要求column1必须是本模型model的数据，column2必须是关联表模型comodel_name的数据，切记不能写错咯~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;你关联我，我关联你，我们同用一个relation&quot;&gt;&lt;a href=&quot;#你关联我，我关联你，我们同用一个relation&quot; class=&quot;headerlink&quot; title=&quot;你关联我，我关联你，我们同用一个relation&quot;&gt;&lt;/a&gt;你关联我，我关联你，我们同用
      
    
    </summary>
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/categories/Odoo/"/>
    
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/tags/Odoo/"/>
    
  </entry>
  
  <entry>
    <title>ir.rule</title>
    <link href="https://yangtiancheng.github.io/ir-rule/"/>
    <id>https://yangtiancheng.github.io/ir-rule/</id>
    <published>2019-04-17T17:04:58.000Z</published>
    <updated>2019-06-10T12:18:21.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是ir-rule"><a href="#什么是ir-rule" class="headerlink" title="什么是ir.rule"></a>什么是ir.rule</h1><p>前面我们讲过了模型访问规则ir.model.access，这里的ir.rule是<br>数据屏蔽规则，简单的说就是谁能看见哪些数据。</p><hr><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><p>name - 名称<br>active - 有效性<br>model_id - 模型<br>groups - 组<br>domain_force - 可访问条件域<br>perm_read - 可读<br>perm_write - 可写<br>perm_create - 可创<br>perm_unlink - 可删</p><pre><code>提示：perm = permission(许可)</code></pre><h2 id="批量写data-xml的权限部分"><a href="#批量写data-xml的权限部分" class="headerlink" title="批量写data.xml的权限部分"></a>批量写data.xml的权限部分</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    models = [</span><br><span class="line">            <span class="string">'account.account'</span>,</span><br><span class="line">            <span class="string">'account.move'</span>,</span><br><span class="line">            <span class="string">'account.move.line'</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    --  用这个SQL可以查到对应 有公司字段且为company_id的model</span></span><br><span class="line"><span class="string">        select model</span></span><br><span class="line"><span class="string">        from ir_model_fields imf</span></span><br><span class="line"><span class="string">        where model in </span></span><br><span class="line"><span class="string">        (</span></span><br><span class="line"><span class="string">            'account.account',</span></span><br><span class="line"><span class="string">            'account.move',</span></span><br><span class="line"><span class="string">            'account.move.line',</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">        and ttype='many2one'</span></span><br><span class="line"><span class="string">        and name = 'company_id'</span></span><br><span class="line"><span class="string">        and relation = 'res.company';</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'&lt;data noupdate="1"&gt;'</span>)</span><br><span class="line">    <span class="keyword">for</span> model <span class="keyword">in</span> models:</span><br><span class="line">        print(<span class="string">"""</span></span><br><span class="line"><span class="string">        &lt;record id="&#123;0&#125;" model="ir.rule"&gt;</span></span><br><span class="line"><span class="string">            &lt;field name="name"&gt;&#123;1&#125;&lt;/field&gt;</span></span><br><span class="line"><span class="string">            &lt;field name="model_id" ref="&#123;2&#125;"/&gt;</span></span><br><span class="line"><span class="string">            &lt;field name="global" eval="True"/&gt;</span></span><br><span class="line"><span class="string">            &lt;field name="domain_force"&gt;</span></span><br><span class="line"><span class="string">                ['|',('company_id', '=', False),'&amp;amp;', ('company_id', 'child_of', [user.company_id.id]), ('company_id', 'in', user.company_ids.ids)]</span></span><br><span class="line"><span class="string">            &lt;/field&gt;</span></span><br><span class="line"><span class="string">        &lt;/record&gt;"""</span>.format(model_name_transfor_table_name(<span class="string">'rule_'</span>+model),model_name_transfor_table_name(model+<span class="string">'_rule'</span>),model_name_transfor_table_name(<span class="string">'model_'</span>+model)))</span><br><span class="line">    print(<span class="string">'&lt;/data&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型转表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model_name_transfor_table_name</span><span class="params">(model_name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> model_name.replace(<span class="string">'.'</span>, <span class="string">'_'</span>)</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是ir-rule&quot;&gt;&lt;a href=&quot;#什么是ir-rule&quot; class=&quot;headerlink&quot; title=&quot;什么是ir.rule&quot;&gt;&lt;/a&gt;什么是ir.rule&lt;/h1&gt;&lt;p&gt;前面我们讲过了模型访问规则ir.model.access，这里的ir.rul
      
    
    </summary>
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/categories/Odoo/"/>
    
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/tags/Odoo/"/>
    
  </entry>
  
  <entry>
    <title>ir.model.access</title>
    <link href="https://yangtiancheng.github.io/ir-model-access/"/>
    <id>https://yangtiancheng.github.io/ir-model-access/</id>
    <published>2019-04-13T18:46:42.000Z</published>
    <updated>2019-04-17T09:03:29.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是ir-model-access"><a href="#什么是ir-model-access" class="headerlink" title="什么是ir.model.access"></a>什么是ir.model.access</h2><p>简单的说，ERP的资源管理，其实不外四种情况（增删改查），<br>那么对于登录用户来说，你有权限做这些操作码？如果不做限<br>制，岂不是随便的一个用户就能轻易的动系统的数据，这是很<br>可怕的。</p><hr><p>模型权限文件有name,active,model_id(非TransientModel<br>模型),group_id,perm_read,perm_write,perm_create,<br>perm_unlink几个字段。<br><a id="more"></a></p><h3 id="function-check-groups"><a href="#function-check-groups" class="headerlink" title="function check_groups"></a>function check_groups</h3><p>参数：<br>group =&gt; module.group_ext_id</p><p>检查当前用户是否在所提供的组里，返回t/f</p><hr><h3 id="function-check-group"><a href="#function-check-group" class="headerlink" title="function check_group"></a>function check_group</h3><p>参数：<br>model - 模型名(如果传入模型对象 将模型名 model.name 取出)<br>mode - 检查方式<br>group_ids - 组</p><p>检查改模型model是否可以被提供的组group_ids 或 组为空时访问，返回t/f</p><hr><h3 id="function-group-names-with-access"><a href="#function-group-names-with-access" class="headerlink" title="function group_names_with_access"></a>function group_names_with_access</h3><p>参数：<br>model_name - 模型名<br>access_mode - 检查方式</p><p>查询当前模型是否有满足检查方式access_mode的组记录，如果有，将这些组以 module_category/group_name的列表形式返回</p><hr><h3 id="function-check"><a href="#function-check" class="headerlink" title="function check"></a>function check</h3><h4 id="1-admin用户"><a href="#1-admin用户" class="headerlink" title="1. admin用户"></a>1. admin用户</h4><p>超级用户拥有所有权限 跳过校验</p><h4 id="2-普通用户"><a href="#2-普通用户" class="headerlink" title="2. 普通用户"></a>2. 普通用户</h4><ol><li><p>对于TransientModel模型,所有用户可跳过校验</p></li><li><p>对于普通模型，检查用户权限组是否存在符合此权限的有效记录<br>如果没有，检查用户是否存在组为空的有效权限记录。如果没有查找到记录，<br>查一下系统中是否有可以访问该model的组!</p></li></ol><p>如果有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_(&quot;Sorry, you are not allowed to [access/modify/create/delete] this document.&quot;),</span><br><span class="line">只有以下访问等级(组)的用户可才做这：category_id1/group1，category_id2/group2...</span><br></pre></td></tr></table></figure></p><p>如果没有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_(&quot;Sorry, you are not allowed to [access/modify/create/delete] this document.&quot;),</span><br><span class="line">如果你认为这是一个错误，请联系你的系统管理员。</span><br></pre></td></tr></table></figure><hr><h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><p>_cache_clearing_methods = set()</p><hr><h3 id="function-register-cache-clearing-method"><a href="#function-register-cache-clearing-method" class="headerlink" title="function register_cache_clearing_method"></a>function register_cache_clearing_method</h3><p>参数：<br>model - 模型名<br>method - 方法名</p><p>将(model,method)添加到类变量__cache_clearing_methods中</p><hr><h3 id="function-unregister-cache-clearing-method"><a href="#function-unregister-cache-clearing-method" class="headerlink" title="function unregister_cache_clearing_method"></a>function unregister_cache_clearing_method</h3><p>参数：<br>model - 模型名<br>method - 方法名</p><p>将(model,method)从类变量__cache_clearing_methods中移除</p><hr><h3 id="function-call-cache-clearing-methods"><a href="#function-call-cache-clearing-methods" class="headerlink" title="function call_cache_clearing_methods"></a>function call_cache_clearing_methods</h3><ol><li>清空当前ir.model.access模型记录的缓存</li><li>清空ir.model.access的check方法的缓存</li><li>__cache_clearing_methods变量中的模型方法 统一执行一遍(测试看都是在清除缓存)</li></ol><hr><h3 id="function-create-write-unlink"><a href="#function-create-write-unlink" class="headerlink" title="function create/write/unlink"></a>function create/write/unlink</h3><p>都会先执行call_cache_clearing_method清一遍缓存，再执行ORM操作。</p><hr><h2 id="问题：最后的清楚缓存部分，为什么要这么做？"><a href="#问题：最后的清楚缓存部分，为什么要这么做？" class="headerlink" title="问题：最后的清楚缓存部分，为什么要这么做？"></a>问题：最后的清楚缓存部分，为什么要这么做？</h2><p>希望有知道的odooer帮忙指点迷津~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是ir-model-access&quot;&gt;&lt;a href=&quot;#什么是ir-model-access&quot; class=&quot;headerlink&quot; title=&quot;什么是ir.model.access&quot;&gt;&lt;/a&gt;什么是ir.model.access&lt;/h2&gt;&lt;p&gt;简单的说，ERP的资源管理，其实不外四种情况（增删改查），&lt;br&gt;那么对于登录用户来说，你有权限做这些操作码？如果不做限&lt;br&gt;制，岂不是随便的一个用户就能轻易的动系统的数据，这是很&lt;br&gt;可怕的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;模型权限文件有name,active,model_id(非TransientModel&lt;br&gt;模型),group_id,perm_read,perm_write,perm_create,&lt;br&gt;perm_unlink几个字段。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/categories/Odoo/"/>
    
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/tags/Odoo/"/>
    
  </entry>
  
  <entry>
    <title>SQL的!=和is not NULL</title>
    <link href="https://yangtiancheng.github.io/SQL%E7%9A%84-%E5%92%8Cis-not-NULL/"/>
    <id>https://yangtiancheng.github.io/SQL的-和is-not-NULL/</id>
    <published>2019-04-08T15:06:19.000Z</published>
    <updated>2019-04-17T03:15:28.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title="!="></a>!=</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">type</span>,*</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">type</span> != <span class="string">'normal'</span></span><br></pre></td></tr></table></figure><p>SQL的Where语句如果出现!=判断符，DB会将数据中type有值且不等于normal的记录查出，<br>但如果记录中对应的type字段是NULL的话，数据将不会被查出来。</p><h1 id="is-not-NULL"><a href="#is-not-NULL" class="headerlink" title="is not NULL"></a>is not NULL</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">type</span>,*</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">type</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><p>将查出type非空的记录</p><p><b>这里需要特别注意筛选数据时，最好不要用!=，除非特别确认这个字段一定是必输字段。</b></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;!=&quot;&gt;&lt;/a&gt;!=&lt;/h1&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
      <category term="SQL" scheme="https://yangtiancheng.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="https://yangtiancheng.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Odoo 浅谈Odoo提供的附件机制</title>
    <link href="https://yangtiancheng.github.io/Odoo-%E6%B5%85%E8%B0%88Odoo%E6%8F%90%E4%BE%9B%E7%9A%84%E9%99%84%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://yangtiancheng.github.io/Odoo-浅谈Odoo提供的附件机制/</id>
    <published>2019-04-06T09:13:38.000Z</published>
    <updated>2019-04-17T03:15:28.792Z</updated>
    
    <content type="html"><![CDATA[<p>Odoo提供的附件机制</p><p><img src="https://img-blog.csdn.net/20180326101437554?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjU0MzI1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><a id="more"></a><p>存储位置可配置：<br>&emsp;&emsp;通过 设置-参数-系统参数 定义的关键字ir_attachment.location来控制附件的存储方式。<br><img src="https://img-blog.csdn.net/2018032610183484?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjU0MzI1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li>1.如果未维护记录或者维护记录值不为db，默认存储路径为应用服务器上的/var/lib/odoo/filestore/数据库名称/文件夹,例如/var/lib/odoo/filestore/ 868/9c。</li></ul><ul><li>2.将文件的路径写入store_fname字段，file_size表示文件大小，db_datas表示文件以二进制的形式存储在数据库中(这里为空)。</li></ul><ul><li>3.如果维护记录值为db，则以binary的形式存储在数据库表db_datas中。</li></ul><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><ol><li><p>可配置存储方式:<br>我们的所有附件数据可以选择保存在数据库db_datas中，还是应用服务器/var/lib/odoo/数据库名/sha1[:2]中。<br>如果保存在应用服务器中，系统的数据库会更加轻便，而且附件使用base64编码文件，通过sha1方式给每一个附件文件标定为唯一的记录datas_fname，如果上传相同的文件，数据库store_fname记录只需要放入文件的服务器软地址，不需要再将文件上传，加速了上传的效率。</p></li><li><p>同一记录单或不同记录单，相同的文件只会上传一次:<br>数据库记录只需要放入相关的访问地址，需要时直接读取，防止多余的空间流失。HRP现有的资质的附件上传方式，采用数据库直接存取二进制文件形式，上传文件就接收，不校验，不智能，数据冗余，使得数据库臃肿不堪。</p></li><li><p>权限检查-更安全：<br>对系统附件的每一种类型的操作，odoo源码附件机制都会检验权限是否满足，只有附件上传者、超级管理员、管理组用户才可以对相关附件进行高级操作，保证了操作附件的安全性。</p></li></ol><ol start="4"><li><p>不易丢失:<br>选择应用服务器保存附件，极端情况下，当数据库数据丢失或损坏时，存储在服务器端的附件不会受到波及，防止数据丢失。</p></li><li><p>异步备份：<br>虽然看起来既要备份数据库，又要备份应用服务器的附件部分，操作步骤变多了。但分步备份保证了数据库快速备份，服务器附件传输要求并不像数据库备份时，要求快速、轻便，所以这样的机制更适合</p></li></ol><p>###如有理解错误的地方，请大家指正.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Odoo提供的附件机制&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180326101437554?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NjU0MzI1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/categories/Odoo/"/>
    
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/tags/Odoo/"/>
    
  </entry>
  
  <entry>
    <title>Odoo12-M2m字段添加一行弹出框内容个性化指定视图+action自定义指定视图</title>
    <link href="https://yangtiancheng.github.io/Odoo12-M2m%E5%AD%97%E6%AE%B5%E6%B7%BB%E5%8A%A0%E4%B8%80%E8%A1%8C%E5%BC%B9%E5%87%BA%E6%A1%86%E5%86%85%E5%AE%B9%E4%B8%AA%E6%80%A7%E5%8C%96%E6%8C%87%E5%AE%9A%E8%A7%86%E5%9B%BE-action%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E5%AE%9A%E8%A7%86%E5%9B%BE/"/>
    <id>https://yangtiancheng.github.io/Odoo12-M2m字段添加一行弹出框内容个性化指定视图-action自定义指定视图/</id>
    <published>2019-04-06T08:58:57.000Z</published>
    <updated>2019-04-17T05:00:06.015Z</updated>
    
    <content type="html"><![CDATA[<p>m2m字段的context属性接收一个 tree_view_ref 属性，通过它指定特定的打开视图即可。<br>举个例子：</p><h3 id="1-首先自定义一个打开字段模型的tree视图："><a href="#1-首先自定义一个打开字段模型的tree视图：" class="headerlink" title="1. 首先自定义一个打开字段模型的tree视图："></a>1. 首先自定义一个打开字段模型的tree视图：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Tree M2M Select View--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">record</span> <span class="attr">model</span>=<span class="string">"ir.ui.view"</span> <span class="attr">id</span>=<span class="string">"&#123;tree_id&#125;"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>Tree M2M Select View<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"model"</span>&gt;</span>&#123;model_name&#125;<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"priority"</span>  <span class="attr">eval</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"arch"</span> <span class="attr">type</span>=<span class="string">"xml"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tree</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"active_flag"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tree</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">record</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>注意：<br>&emsp;&emsp;最好指定一个priority属性值&gt;16，否则可能会将你原来model的tree视图也跳转到新写的tree上了(odoo8中会出现这个情况 默认值16 加载默认取最新的视图)；或者，你可以在action上指定一个view_ids,保证原生的视图一定连接到对应的类型视图：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"view_ids"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">eval</span>=<span class="string">"[(5, 0, 0),</span></span></span><br><span class="line"><span class="tag"><span class="string">                      (0, 0, &#123;'view_mode': 'tree', 'view_id': ref('&#123;module_name&#125;.&#123;tree_view_id&#125;')&#125;),</span></span></span><br><span class="line"><span class="tag"><span class="string">                      (0, 0, &#123;'view_mode': 'form', 'view_id': ref('&#123;module_name&#125;.&#123;form_view_id&#125;')&#125;)]"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-在对应的m2m字段上指定视图"><a href="#2-在对应的m2m字段上指定视图" class="headerlink" title="2. 在对应的m2m字段上指定视图"></a>2. 在对应的m2m字段上指定视图</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"element_ids"</span> <span class="attr">context</span>=<span class="string">"&#123;'tree_view_ref': '&#123;module_name&#125;.&#123;tree_id&#125;'&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单的总结，就到这里吧，大家如果有更好的方式请分享给我~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;m2m字段的context属性接收一个 tree_view_ref 属性，通过它指定特定的打开视图即可。&lt;br&gt;举个例子：&lt;/p&gt;
&lt;h3 id=&quot;1-首先自定义一个打开字段模型的tree视图：&quot;&gt;&lt;a href=&quot;#1-首先自定义一个打开字段模型的tree视图：&quot; class=&quot;headerlink&quot; title=&quot;1. 首先自定义一个打开字段模型的tree视图：&quot;&gt;&lt;/a&gt;1. 首先自定义一个打开字段模型的tree视图：&lt;/h3&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--Tree M2M Select View--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;model&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ir.ui.view&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;tree_id&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Tree M2M Select View&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;field&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;model&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;model_name&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;field&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;priority&quot;&lt;/span&gt;  &lt;span class=&quot;attr&quot;&gt;eval&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;20&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;arch&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;xml&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tree&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;active_flag&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tree&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;field&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;record&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/categories/Odoo/"/>
    
      <category term="XML" scheme="https://yangtiancheng.github.io/categories/Odoo/XML/"/>
    
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/tags/Odoo/"/>
    
      <category term="XML" scheme="https://yangtiancheng.github.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>Odoo12的数据库表约束变化时如何更新约束(_sql_constraints)</title>
    <link href="https://yangtiancheng.github.io/Odoo12%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BA%A6%E6%9D%9F%E5%8F%98%E5%8C%96%E6%97%B6%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%E7%BA%A6%E6%9D%9F-sql-constraints/"/>
    <id>https://yangtiancheng.github.io/Odoo12的数据库表约束变化时如何更新约束-sql-constraints/</id>
    <published>2019-04-06T08:52:39.000Z</published>
    <updated>2019-04-17T03:15:28.810Z</updated>
    
    <content type="html"><![CDATA[<p>两种方式：</p><h3 id="1-覆盖重写"><a href="#1-覆盖重写" class="headerlink" title="1. 覆盖重写"></a>1. 覆盖重写</h3><pre><code>举个🌰：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># odoo源码酱紫</span></span><br><span class="line">_sql_constraints = [</span><br><span class="line">       (<span class="string">'code_and_name'</span>,</span><br><span class="line">        <span class="string">'UNIQUE(code,name)'</span>,</span><br><span class="line">        _(<span class="string">"Code and Name must be unique!"</span>)),</span><br><span class="line">   ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在变成了 code + company 唯一约束</span></span><br><span class="line"><span class="comment"># 如果哦我们不介意unique的在数据库中的名称 我们可以酱紫写</span></span><br><span class="line">_sql_constraints = [</span><br><span class="line">       (<span class="string">'code_and_name'</span>,</span><br><span class="line">        <span class="string">'UNIQUE(code,company_id)'</span>,</span><br><span class="line">        _(<span class="string">"Code and Company must be unique!"</span>)),</span><br><span class="line">   ]</span><br><span class="line"><span class="comment"># 即名称相同，直接覆盖 可以取数据库中查看表的unique选项 </span></span><br><span class="line">![覆盖重写](https://img-blog.csdnimg.cn/<span class="number">20190311140149173.</span>png)</span><br></pre></td></tr></table></figure></code></pre><a id="more"></a>    <h3 id="2-查询删除并新增"><a href="#2-查询删除并新增" class="headerlink" title="2. 查询删除并新增"></a>2. 查询删除并新增</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># odoo源码酱紫(account.account)</span></span><br><span class="line">  _sql_constraints = [</span><br><span class="line">       (<span class="string">'code_company_uniq'</span>, </span><br><span class="line">       <span class="string">'unique (code,company_id)'</span>, </span><br><span class="line">       <span class="string">'The code of the account must be unique per company !'</span>)</span><br><span class="line">   ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询删除并新增酱紫</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> odoo <span class="keyword">import</span> _, api, fields, models, modules</span><br><span class="line"><span class="keyword">from</span> odoo.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">_logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AcountAccountInherit</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    _inherit = <span class="string">'account.account'</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@api.model_cr</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 删除Odoo源码 科目表的约束条件</span></span><br><span class="line">        cr = self.env.cr</span><br><span class="line">        unique_name = <span class="string">'account_account_code_company_uniq'</span></span><br><span class="line">        table_name = <span class="string">'account_account'</span></span><br><span class="line">        cr.execute(<span class="string">"""SELECT 1 from pg_constraint cs JOIN pg_class cl ON (cs.conrelid = cl.oid)</span></span><br><span class="line"><span class="string">                                           WHERE cs.conname=%s and cl.relname=%s"""</span>, (unique_name, table_name))</span><br><span class="line">        <span class="keyword">if</span> cr.fetchone():</span><br><span class="line">            cr.execute(<span class="string">'ALTER TABLE "%s" DROP CONSTRAINT "%s"'</span> % (table_name, unique_name), )</span><br><span class="line">            _logger.info(<span class="string">'Dropped CONSTRAINT %s@%s'</span>, table_name, unique_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增新约束</span></span><br><span class="line">    _sql_constraints = [</span><br><span class="line">        (<span class="string">'code_and_account_structure'</span>,</span><br><span class="line">         <span class="string">'UNIQUE(code,account_structure_id)'</span>,</span><br><span class="line">         _(<span class="string">"Code and account structure must be unique!"</span>)),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两种方式：&lt;/p&gt;
&lt;h3 id=&quot;1-覆盖重写&quot;&gt;&lt;a href=&quot;#1-覆盖重写&quot; class=&quot;headerlink&quot; title=&quot;1. 覆盖重写&quot;&gt;&lt;/a&gt;1. 覆盖重写&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;举个🌰：
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# odoo源码酱紫&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_sql_constraints = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (&lt;span class=&quot;string&quot;&gt;&#39;code_and_name&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;UNIQUE(code,name)&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _(&lt;span class=&quot;string&quot;&gt;&quot;Code and Name must be unique!&quot;&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 现在变成了 code + company 唯一约束&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 如果哦我们不介意unique的在数据库中的名称 我们可以酱紫写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_sql_constraints = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (&lt;span class=&quot;string&quot;&gt;&#39;code_and_name&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;UNIQUE(code,company_id)&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _(&lt;span class=&quot;string&quot;&gt;&quot;Code and Company must be unique!&quot;&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 即名称相同，直接覆盖 可以取数据库中查看表的unique选项 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;![覆盖重写](https://img-blog.csdnimg.cn/&lt;span class=&quot;number&quot;&gt;20190311140149173.&lt;/span&gt;png)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/categories/Odoo/"/>
    
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/tags/Odoo/"/>
    
  </entry>
  
  <entry>
    <title>Odoo12个性化模块覆盖源码字段的翻译(i18n)</title>
    <link href="https://yangtiancheng.github.io/Odoo12%E4%B8%AA%E6%80%A7%E5%8C%96%E6%A8%A1%E5%9D%97%E8%A6%86%E7%9B%96%E6%BA%90%E7%A0%81%E5%AD%97%E6%AE%B5%E7%9A%84%E7%BF%BB%E8%AF%91-i18n/"/>
    <id>https://yangtiancheng.github.io/Odoo12个性化模块覆盖源码字段的翻译-i18n/</id>
    <published>2019-04-06T08:52:18.000Z</published>
    <updated>2019-04-17T03:15:28.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>当我们有一个字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源码 analytic 模块</span></span><br><span class="line"><span class="string">"""py代码"""</span></span><br><span class="line">code = fields.Char(string=<span class="string">'Reference'</span>, index=<span class="literal">True</span>, track_visibility=<span class="string">'onchange'</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;po代码&quot;&quot;&quot;</span><br><span class="line">#. module: analytic</span><br><span class="line">#: model:ir.model.fields,field_description:analytic.field_account_analytic_account__code</span><br><span class="line">msgid &quot;Reference&quot;</span><br><span class="line">msgstr &quot;参考&quot;</span><br></pre></td></tr></table></figure><a id="more"></a>    <p>现在我们需要将Reference翻译成 “编码参照”<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 个性化 new_module 模块</span></span><br><span class="line"><span class="string">"""py代码"""</span></span><br><span class="line"><span class="comment"># 继承_get_import_cursor方法 将继承模块的翻译替换 启用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IrTranslation</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    _inherit = <span class="string">'ir.translation'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_import_cursor</span><span class="params">(self)</span>:</span></span><br><span class="line">        context = self._context.copy()</span><br><span class="line">        context[<span class="string">'overwrite'</span>] = <span class="literal">True</span></span><br><span class="line">        self = self.with_context(context)</span><br><span class="line">        <span class="keyword">return</span> super(IrTranslation, self)._get_import_cursor()</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;po代码 覆盖原翻译&quot;&quot;&quot;</span><br><span class="line">#. module: analytic</span><br><span class="line">#: model:ir.model.fields,field_description:analytic.field_account_analytic_account__code</span><br><span class="line">msgid &quot;Reference&quot;</span><br><span class="line">msgstr &quot;编码参照&quot;</span><br></pre></td></tr></table></figure><p>其实这个与我们config文件中的 –i18n-overwrite =&gt; config[‘overwrite_existing_translations’] 的配置内容相同。</p><p>这样处理后，我们需要升级我们的个性化模块 new_module ，升级完成后，翻译覆盖成功。<br>值得注意的是：1. 加载翻译不会生效 2. 升级模块后翻译覆盖成功，但是如果再次加载翻译，覆盖的翻译会被还原。</p><pre><code>讨论：如何将源码的翻译替换掉，并且还能拿持久化，如果有好的建议请您指点！</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h1&gt;&lt;p&gt;当我们有一个字段&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 源码 analytic 模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;py代码&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;code = fields.Char(string=&lt;span class=&quot;string&quot;&gt;&#39;Reference&#39;&lt;/span&gt;, index=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;, track_visibility=&lt;span class=&quot;string&quot;&gt;&#39;onchange&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;po代码&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#. module: analytic&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#: model:ir.model.fields,field_description:analytic.field_account_analytic_account__code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;msgid &amp;quot;Reference&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;msgstr &amp;quot;参考&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/categories/Odoo/"/>
    
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/tags/Odoo/"/>
    
  </entry>
  
  <entry>
    <title>odoo action页面跳转直接为编辑状态操作</title>
    <link href="https://yangtiancheng.github.io/odoo-action%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E7%9B%B4%E6%8E%A5%E4%B8%BA%E7%BC%96%E8%BE%91%E7%8A%B6%E6%80%81%E6%93%8D%E4%BD%9C/"/>
    <id>https://yangtiancheng.github.io/odoo-action页面跳转直接为编辑状态操作/</id>
    <published>2019-04-06T08:40:12.000Z</published>
    <updated>2019-04-17T05:00:06.011Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">return &#123;</span><br><span class="line">        &apos;type&apos;: &apos;ir.actions.act_window&apos;,</span><br><span class="line">        &apos;view_type&apos;: &apos;form&apos;,</span><br><span class="line">        &apos;view_mode&apos;: &apos;form&apos;,</span><br><span class="line">        &apos;res_model&apos;: &apos;；module.model_name&apos;,</span><br><span class="line">        &apos;res_id&apos;: self.id,</span><br><span class="line">        &apos;context&apos;: self.env.context,</span><br><span class="line">        &apos;flags&apos;: &#123;&apos;initial_mode&apos;: &apos;edit&apos;&#125;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>加上这句：‘flags’: {‘initial_mode’: ‘edit’},<br><a id="more"></a></p><p>Odoo12使用：<br>context[‘form_view_initial_mode’] = ‘edit’</p><p><a href="https://www.cnblogs.com/hellojesson/p/8405539.html" target="_blank" rel="noopener">特别感谢技术提供来源URL</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;return &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;apos;type&amp;apos;: &amp;apos;ir.actions.act_window&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;apos;view_type&amp;apos;: &amp;apos;form&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;apos;view_mode&amp;apos;: &amp;apos;form&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;apos;res_model&amp;apos;: &amp;apos;；module.model_name&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;apos;res_id&amp;apos;: self.id,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;apos;context&amp;apos;: self.env.context,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;apos;flags&amp;apos;: &amp;#123;&amp;apos;initial_mode&amp;apos;: &amp;apos;edit&amp;apos;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;加上这句：‘flags’: {‘initial_mode’: ‘edit’},&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/categories/Odoo/"/>
    
      <category term="XML" scheme="https://yangtiancheng.github.io/categories/Odoo/XML/"/>
    
    
      <category term="Odoo" scheme="https://yangtiancheng.github.io/tags/Odoo/"/>
    
      <category term="XML" scheme="https://yangtiancheng.github.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>hexo的坑汇总</title>
    <link href="https://yangtiancheng.github.io/hexo%E7%9A%84%E5%9D%91%E6%B1%87%E6%80%BB/"/>
    <id>https://yangtiancheng.github.io/hexo的坑汇总/</id>
    <published>2019-04-06T00:55:28.000Z</published>
    <updated>2019-04-17T03:13:30.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="删除hexo工程"><a href="#删除hexo工程" class="headerlink" title="删除hexo工程"></a>删除hexo工程</h2><p>手动rm -rf hexo工程 后，发现了一个问题，虽然绑定了github page,但是hexo工程的源码并没有了，<br>目前是没发现什么恢复的方式。</p><p>推荐大家使用pycharm编写，就算rm -rf 删除了工程，我们可以mkdir 同名hexo<br>工程文件，然后右击文件上选择Local History,找到一个历史点，选择Revert，这时候工程就恢复到了历史点。<br><a id="more"></a></p><h2 id="推荐使用方式"><a href="#推荐使用方式" class="headerlink" title="推荐使用方式"></a>推荐使用方式</h2><ol><li>使用pycharm编辑</li><li>使用git仓库管理，定时上传hexo工程代码</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;删除hexo工程&quot;&gt;&lt;a href=&quot;#删除hexo工程&quot; class=&quot;headerlink&quot; title=&quot;删除hexo工程&quot;&gt;&lt;/a&gt;删除hexo工程&lt;/h2&gt;&lt;p&gt;手动rm -rf hexo工程 后，发现了一个问题，虽然绑定了github page,但是hexo工程的源码并没有了，&lt;br&gt;目前是没发现什么恢复的方式。&lt;/p&gt;
&lt;p&gt;推荐大家使用pycharm编写，就算rm -rf 删除了工程，我们可以mkdir 同名hexo&lt;br&gt;工程文件，然后右击文件上选择Local History,找到一个历史点，选择Revert，这时候工程就恢复到了历史点。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://yangtiancheng.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://yangtiancheng.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>npm切换国内源</title>
    <link href="https://yangtiancheng.github.io/npm%E5%88%87%E6%8D%A2%E5%9B%BD%E5%86%85%E6%BA%90/"/>
    <id>https://yangtiancheng.github.io/npm切换国内源/</id>
    <published>2019-04-05T22:17:35.000Z</published>
    <updated>2019-04-17T03:13:48.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="切换国内源"><a href="#切换国内源" class="headerlink" title="切换国内源"></a>切换国内源</h1><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><p>cnpm install hexo-cli -g<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;切换国内源&quot;&gt;&lt;a href=&quot;#切换国内源&quot; class=&quot;headerlink&quot; title=&quot;切换国内源&quot;&gt;&lt;/a&gt;切换国内源&lt;/h1&gt;&lt;p&gt;npm install -g cnpm –registry=&lt;a href=&quot;https://registry.npm.taobao.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://registry.npm.taobao.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;cnpm install hexo-cli -g&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://yangtiancheng.github.io/categories/linux/"/>
    
      <category term="npm" scheme="https://yangtiancheng.github.io/categories/linux/npm/"/>
    
    
      <category term="linux" scheme="https://yangtiancheng.github.io/tags/linux/"/>
    
      <category term="npm" scheme="https://yangtiancheng.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>PEP8必须学习</title>
    <link href="https://yangtiancheng.github.io/PEP8%E5%BF%85%E9%A1%BB%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yangtiancheng.github.io/PEP8必须学习/</id>
    <published>2019-04-05T22:06:31.000Z</published>
    <updated>2019-04-17T03:15:28.773Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/ratsniper/article/details/78954852#introduction-%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">URL-Chinese</a><br><a href="https://www.python.org/dev/peps/pep-0008/#introduction" target="_blank" rel="noopener">URL-English</a></p><h1 id="这些开发规范还是很重要的，必读"><a href="#这些开发规范还是很重要的，必读" class="headerlink" title="这些开发规范还是很重要的，必读"></a>这些开发规范还是很重要的，必读</h1><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/ratsniper/article/details/78954852#introduction-%E4%BB%8B%E7%BB%8D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;URL-Chinese&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#introduction&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;URL-English&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;这些开发规范还是很重要的，必读&quot;&gt;&lt;a href=&quot;#这些开发规范还是很重要的，必读&quot; class=&quot;headerlink&quot; title=&quot;这些开发规范还是很重要的，必读&quot;&gt;&lt;/a&gt;这些开发规范还是很重要的，必读&lt;/h1&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yangtiancheng.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yangtiancheng.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Postgresql10持续学习(ing)</title>
    <link href="https://yangtiancheng.github.io/Postgresql10%E6%8C%81%E7%BB%AD%E5%AD%A6%E4%B9%A0-ing/"/>
    <id>https://yangtiancheng.github.io/Postgresql10持续学习-ing/</id>
    <published>2019-04-05T22:05:50.000Z</published>
    <updated>2019-04-17T03:15:28.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><ul><li>视图是为了避免每次查询都要敲打sql而出现的替代物，它就像一张表，可以存储多个变之间的结构和数据关系。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 学生选课查询</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> myView <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">select</span> p.name,p.age,c.name</span><br><span class="line">        <span class="keyword">from</span> people p,course c</span><br><span class="line">        <span class="keyword">where</span> p.id = c.p_id</span><br></pre></td></tr></table></figure></li></ul><p>以后我想查询数据，我只需要select * from myView;就能实现我的整个查询。<br><a id="more"></a></p><h1 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h1><ul><li>可以约束表的插入数据的完整性</li></ul><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><ul><li>事务最重要的一点是它将多个步骤捆绑成了一个单一的、要么全完成要么全不完成的操作</li><li>一个事务被数据库系统完成并认可，它就被永久地记录下来且即便其后发生崩溃也不会被丢失</li><li>当多个事务并发运行时，每一个都不能看到其他事务未完成的修改</li><li>一组被BEGIN和COMMIT包围的语句也被称为一个事务块</li></ul><h2 id="保存回滚点"><a href="#保存回滚点" class="headerlink" title="保存回滚点"></a>保存回滚点</h2><ul><li>回滚点前的数据依旧存在 回滚点到rollback区间的操作不记录<br>savepoint 回滚点名称<br>rollback to 回滚点名称<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance = balance - <span class="number">100.00</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Alice'</span>;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> my_savepoint;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance = balance + <span class="number">100.00</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Bob'</span>;</span><br><span class="line"><span class="comment">-- oops ... forget that and use Wally's account</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> my_savepoint;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance = balance + <span class="number">100.00</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Wally'</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h1><ul><li>窗口函数主要是用聚集函数的，但是需要部分聚集，相同聚集字段记录放一起进行聚集计算<br>OVER (ORDER BY 字段名 ORDER BY 字段名) 是窗口函数的定义<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary, <span class="keyword">sum</span>(salary) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> salary) <span class="keyword">FROM</span> empsalary;</span><br></pre></td></tr></table></figure></li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cities (</span><br><span class="line"><span class="keyword">name</span>       <span class="built_in">text</span>,</span><br><span class="line">population <span class="built_in">real</span>,</span><br><span class="line">altitude   <span class="built_in">int</span>     <span class="comment">-- (in ft)</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> capitals (</span><br><span class="line">state      <span class="built_in">char</span>(<span class="number">2</span>)</span><br><span class="line">) INHERITS (cities);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, altitude</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">ONLY</span> cities</span><br><span class="line"><span class="keyword">WHERE</span> altitude &gt; <span class="number">500</span>;</span><br></pre></td></tr></table></figure><ul><li>ONLY用于指示查询只在cities表上进行而不会涉及到继承层次中位于cities之下的其他表</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;视图&quot;&gt;&lt;a href=&quot;#视图&quot; class=&quot;headerlink&quot; title=&quot;视图&quot;&gt;&lt;/a&gt;视图&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;视图是为了避免每次查询都要敲打sql而出现的替代物，它就像一张表，可以存储多个变之间的结构和数据关系。&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 学生选课查询&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;view&lt;/span&gt; myView &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; p.name,p.age,c.name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; people p,course c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; p.id = c.p_id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以后我想查询数据，我只需要select * from myView;就能实现我的整个查询。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Postgresql" scheme="https://yangtiancheng.github.io/categories/Postgresql/"/>
    
    
      <category term="Postgresql" scheme="https://yangtiancheng.github.io/tags/Postgresql/"/>
    
  </entry>
  
</feed>
